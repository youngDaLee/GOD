---
alwaysApply: true
---

# G.O.D (Go Observability Daemon) 프로젝트 가이드라인

## 프로젝트 개요
**G.O.D**는 개발자를 위한 실시간 모니터링 라이브러리로, HTTP 요청과 시스템 리소스 사용량 간의 연관성을 분석하여 시각화하는 도구입니다.

### 핵심 목표
- **Easy to Learn**: 복잡한 설정 없이 쉽게 설치하고 사용 가능
- **Real-time Monitoring**: 시스템 리소스, 함수 단위 실행 정보 실시간 수집
- **Built-in Visualization**: 웹 대시보드를 통한 즉시 시각화
- **Alerting Support**: Slack, Email 등 알람 연동 가능
- **Lightweight & Fast**: Go 기반으로 최소 자원 사용, 빠른 속도 제공

## 프로젝트 구조

### 디렉토리 구성
```
god/
├── cmd/           # CLI 명령어 및 실행 파일
│   └── cli/       # 커맨드라인 인터페이스
├── data/          # 데이터 수집 및 저장 관련
├── proxy/         # HTTP 프록시 서버
├── display/       # 시각화 및 대시보드
├── alert/         # 알람 시스템
├── config/        # 설정 관리
├── web/           # 웹 인터페이스
├── ai/            # AI 분석 기능
├── docs/          # 문서
└── test/          # 테스트 코드
```

### 주요 패키지 역할
- **data**: 메트릭 수집, 저장, 관리
- **proxy**: HTTP 요청 프록시 및 로깅
- **display**: 실시간 시각화 및 대시보드
- **alert**: 알람 시스템 및 알림 기능
- **config**: 설정 파일 관리
- **web**: 웹 UI 및 API 엔드포인트

## 개발 가이드라인

### 1. 코드 컨벤션
- Go 언어 표준 fmt 규칙 준수
- 파일명: 소문자, 밑줄 사용 금지 (예: `httpserver.go`)
- 변수명: 짧고 의미있는 이름, 공개 변수는 대문자 시작
- 구조체: 명사형, 대문자 시작 (예: `Server`, `Config`)
- 함수: 동사형, 공개 함수는 대문자 시작 (예: `StartServer()`)
- 인터페이스: -er 접미어 사용 (예: `Reader`, `Writer`)

### 2. 에러 처리
- `errors.Wrap` 사용 권장
- 적절한 에러 로깅 및 처리

### 3. 코드 스타일
- VSCode 저장 시 자동 포맷팅 사용
- `go fmt` 명령어 활용

## 핵심 기능 구현 가이드

### 1. 메트릭 수집 (data 패키지)
- HTTP 요청/응답 데이터 수집
- 시스템 리소스 (CPU, Memory) 모니터링
- 실시간 데이터 저장 및 관리

### 2. 프록시 서버 (proxy 패키지)
- HTTP 요청 프록시 기능
- 요청/응답 로깅
- 성능 측정 (응답 시간, 메모리 사용량)

### 3. 시각화 (display 패키지)
- 실시간 대시보드
- HTTP 요청과 시스템 리소스 연관 분석
- 차트 및 그래프 표시

### 4. 알람 시스템 (alert 패키지)
- 임계값 기반 알람
- Slack, Email 연동
- 커스텀 알람 규칙

### 5. 웹 인터페이스 (web 패키지)
- RESTful API 제공
- 웹 대시보드
- 설정 관리 UI

## 성능 및 품질 목표
- **응답 시간**: HTTP 요청 처리 지연 최소화
- **메모리 사용량**: 최소한의 리소스 사용
- **확장성**: 다양한 언어 및 프레임워크 지원
- **사용성**: 직관적이고 쉬운 설정 및 사용

## 테스트 전략
- 단위 테스트: 각 패키지별 기능 테스트
- 통합 테스트: 전체 시스템 연동 테스트
- 성능 테스트: 부하 테스트 및 벤치마크
- 사용자 테스트: 실제 개발 환경에서의 사용성 검증
alwaysApply: true
---
